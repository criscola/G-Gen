{{define "title"}}GGen &#8212; Generator{{end}}
{{define "head"}}
<link rel="stylesheet" type="text/css" href="../assets/css/slick.css">
<link rel="stylesheet" type="text/css" href="../assets/css/slick-theme.css">
<link rel="stylesheet" type="text/css" href="../assets/css/dropzone.css">
<link rel="stylesheet" type="text/css" href="../assets/css/mb.slider.css">

<script type="text/javascript" src="../assets/js/slick.js" ></script>
<script type="text/javascript" src="../assets/js/dropzone.js"></script>
<script type="text/javascript" src="../assets/js/js.cookie.js"></script>
<script type="text/javascript" src="../assets/js/fabric.min.js"></script>
<script type="text/javascript" src="../assets/js/jquery.mb.slider.js"></script>

<script type="text/javascript">
    var imageWidth = 550;
    var imagePath = "";
    var canvas;
    
    $(document).ready(function() {
        $("#canvasContainer").hide();
        $(".generatorForm").slick({
            lazyLoad: 'ondemand', // ondemand progressive anticipated
            infinite: false,
            draggable: false,
            swipe: false,
            swipeToSlide: false,
            touchMove: false,
            draggable: false,
        });
        $('#forwardToGeneralSettings').click(function() {
            $(".generatorForm").slick("slickGoTo", 1);
        });
        $('#forwardToPrinterSettings').click(function() {
            $(".generatorForm").slick("slickGoTo", 3);
        });
        $('#forwardToLoadingScreen').click(function() {
            $.ajax({
                url: "/generator/generate",
                type: "POST",
                success: function(result){

                },
            })
            // Open transmission with server
            // Send data to the server
            // Receive informations about elaboration and modify loading bar accordingly
            // When finished, receive final G-Code location in server (which will be delete after user exited webpage) so that
            // the viewer can load it
            // Close transmission
            // Go to next slide
            // Reset data for loading slide
            $(".generatorForm").slick("slickGoTo", 4);
            // Debug only
            setTimeout(
                function() 
                {
                    $(".generatorForm").slick("slickGoTo", 5);
                }, 1500);
            
        });
        $('#forwardToPreview').click(function() {
            $(".generatorForm").slick("slickGoTo", 5);
        });
        $('#restartForm').click(function() {
            $(".generatorForm").slick("slickGoTo", 1);
        });
        $('#makeAnotherModel').click(function() {
            // Cancel all data
            $(".generatorForm").slick("slickGoTo", 0);
        });
        $('#backToImageUpload').click(function() {
            $(".generatorForm").slick("slickGoTo", 0);
        });
        $('#backToPrinterSettings').click(function() {
            $(".generatorForm").slick("slickGoTo", 3);
        });
        
        $('#removeImage').click(function() {
            $.ajax({
                url: '/generator/imageRemove',
                type: 'DELETE',
                success: function(result) {
                    $('#removeImage').prop("disabled", true);
                    $("#forwardToGeneralSettings").prop("disabled", true);
                    $("#brightnessSlider").mbsetVal(0);
                    $("#contrastSlider").mbsetVal(0);
                    canvas.clear();
                    $("#canvasContainer").hide();
                    $("#imageUpload").show();
                }
            });
            
        });

        $("#brightnessSlider").mbSlider({
            formatValue: function(val){
                return Number(val).toFixed(2);
            },
            onSlide: function(o){
                if (canvas != null) {
                    if (canvas.getObjects()[0] != null) { 
                        var val = $(o).mbgetVal();
                        img = canvas.getObjects()[0];
                        
                        if (img.filters[0] != null) {
                            img.filters[0]["brightness"] = parseFloat(val);
                        } else {
                            img.filters[0] = new fabric.Image.filters.Brightness({brightness: parseFloat(val)});
                        }
                        
                        img.applyFilters();
                        canvas.renderAll();
                    }
                }
            },
            onStop: function(o){
                // If user didn't upload an image, reset slider value to 0
                if (canvas == null || canvas.getObjects()[0] == null) {
                    $("#brightnessSlider").mbsetVal(0);
                }
            }
        });

        $("#contrastSlider").mbSlider({
            formatValue: function(val){
                return Number(val).toFixed(2);
            },
            onSlide:function(o){
                if (canvas != null && canvas.getObjects()[0] != null) {
                    var val = $(o).mbgetVal();
                    img = canvas.getObjects()[0];
                    
                    if (img.filters[1] != null) {
                        img.filters[1]["contrast"] = parseFloat(val);
                    } else {
                        img.filters[1] = new fabric.Image.filters.Contrast({contrast: parseFloat(val)});
                    }
                    
                    img.applyFilters();
                    canvas.renderAll();
                }
            },
            onStop: function(o){
                // If user didn't upload an image, reset slider value to 0
                if (canvas == null || canvas.getObjects()[0] == null) {
                    $("#contrastSlider").mbsetVal(0);
                }
            }

        });

    });

    Dropzone.options.imageUpload = {
        paramName: "image", // The name that will be used to transfer the file
        maxFilesize: 5, // MB
        previewsContainer: false,
        accept: function(file, done) {
            // Checks if file has an image extension. If not, decline upload
            var re = /(?:\.([^.]+))?$/;
            var ext = re.exec(file.name)[1];
            ext = ext.toUpperCase();
            if (ext == "JPEG" || ext == "PNG" || ext == "BMP" ||  ext == "JPG") {
                done();
            } else {
                alert("Accepted filetypes are JPEG, JPG, PNG, BMP.");
            }
        },
        // On image upload success
        success: function(file, response) {
            imagePath = response;
            $("#canvasContainer").show();
            var canvasContainer;

            // If canvas wasn't create before
            if (canvas == null) {
                // Create canvas element
                canvasContainer = document.createElement("canvas");
                // Append new canvas to the canvasContainer div
                $("#canvasContainer").append(canvasContainer);
                // Create new fabric.Canvas referring to the new canvas element
                canvas = new fabric.StaticCanvas(canvasContainer, {width: 0, height: 0});
                canvas.hoverCursor = "default";
            }
            // Add image to canvas
            fabric.Image.fromURL("../uploads/" + imagePath + "?new=", function(oImg) {
                var scale = imageWidth / oImg.width;
                
                oImg.set({
                    scaleX: scale,
                    scaleY: scale,
                    lockMovementX: true,
                    lockMovementY: true,
                    selectable: false,
                    hasControls: false,
                    hasRotatingPoint: false,

                });

                canvas.setWidth(imageWidth);
                canvas.setHeight(oImg.height * scale);
                canvas.add(oImg);
            })
            $("#removeImage").prop("disabled", false);
            $('#forwardToGeneralSettings').prop("disabled", false);
            $("#imageUpload").hide();
        }
        
    };
</script>

{{end}}
{{define "content"}}
    <section class="generatorForm">
        <!-- Upload image slide -->
        <div>
            <fieldset class="slickContainer">
                <legend class="slideTitle">Upload image</legend>
                <div id="canvasContainer"></div>
                <!-- Drag & drop image -->
                <div id="imageUploadContainer">
                    <form action="generator/imageUpload" id="imageUpload" class="dropzone" enctype="multipart/form-data" method="POST"> </form>
                </div>
                
                <table id="formTable" style="padding-top:20px;">
                    <tr>
                        <td style="padding-bottom: 11px;padding-right: 10px;">
                            <label style="font-weight: bold;">Brightness</label>
                        </td>
                        <td>
                            <div id="brightnessSlider" class="mb_slider" data-property="{minVal:-1,rangeColor:'green', maxVal:1, startAt:0, grid:0.003921}" style="display:block;"></div>                                </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-bottom: 11px;padding-right: 10px;">
                            <label style="font-weight: bold;">Contrast</label>
                        </td>
                        <td>
                            <div id="contrastSlider" class="mb_slider" data-property="{minVal:-1,rangeColor:'green', maxVal:1, startAt:0, grid:0.003921}" style="display:block;"></div>                                </div>
                        </td>
                    </tr>
                </table>
                
                <div class="slickControls">
                    <button id="removeImage" type="button" disabled>Remove image</button>
                    <button id="forwardToGeneralSettings" type="button" disabled>Next</button>
                </div>
            </fieldset>
        </div>
        <!-- Printer settings slide -->
        <div>
            <fieldset>
                <legend class="slideTitle">Printer settings</legend>
                <div class="slickControls">
                    <table id="formTable">
                        <tr>
                            <td style="padding-right:10px;">
                                <label style="font-weight: bold;">Scale factor</label>
                            </td>
                            <td>
                                <input type="number" min="0" max="2" step="0.5">
                            </td>
                        </tr>
                        <tr>
                            <td style="padding-right:10px;">
                                <label style="font-weight: bold;">Travel speed [mm/s]</label>
                            </td>
                            <td>
                                <input type="number" min="0" max="2000" step="1">
                            </td>
                        </tr>
                    </table>
                    <div class="settingsContainer">
                        <button id="backToImageUpload" type="button">Back</button>
                        <button id="forwardToLoadingScreen" type="button">Generate!</button>
                    </div>
                </div>  
            </fieldset>
        </div>
        <!-- Loading slide -->
        <div>
            <p style="text-align:center;">Please wait...</p>
        </div>
        <!-- Preview slide -->
        <div>
            <fieldset>
                <legend class="slideTitle">Preview</legend>
                <button id="restartForm" type="button">Remake it</button>
                <button id="makeAnotherModel" type="button">Another one</button>
            </fieldset>
        </div>
    </section>
{{end}}