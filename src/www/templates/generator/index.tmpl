{{define "title"}}GGen &#8212; Generator{{end}} {{define "head"}}
<link rel="stylesheet" type="text/css" href="../assets/css/slick.css">
<link rel="stylesheet" type="text/css" href="../assets/css/slick-theme.css">
<link rel="stylesheet" type="text/css" href="../assets/css/dropzone.css">
<link rel="stylesheet" type="text/css" href="../assets/css/mb.slider.css">
<link rel="stylesheet" type="text/css" href="../assets/css/bootstrap-progressbar.css">

<script type="text/javascript" src="../assets/js/slick.js"></script>
<script type="text/javascript" src="../assets/js/dropzone.js"></script>
<script type="text/javascript" src="../assets/js/js.cookie.js"></script>
<script type="text/javascript" src="../assets/js/fabric.min.js"></script>
<script type="text/javascript" src="../assets/js/jquery.mb.slider.js"></script>
<script type="text/javascript" src="../assets/js/bootstrap-progressbar.js"></script>

<script type="text/javascript">
    let imageWidth = 550;
    let canvas;

    $(document).ready(function () {
        $("#canvasContainer").hide();

        $(".generatorForm").slick({
            lazyLoad: 'ondemand', // ondemand progressive anticipated
            infinite: false,
            draggable: false,
            swipe: false,
            swipeToSlide: false,
            touchMove: false,
        });

        loadCookieValues();

        $('#forwardToGeneralSettings').click(function () {
            $(".generatorForm").slick("slickGoTo", 1);
        });
        $('#forwardToPrinterSettings').click(function () {
            $(".generatorForm").slick("slickGoTo", 3);
        });
        // Send parameters to server
        $('#forwardToLoadingScreen').click(function () {
            $('.progress .progress-bar').progressbar({ display_text: 'center' });
            $(".generatorForm").slick("slickGoTo", 2);

            // Get parameters from inputs
            console.log("params: " + getJobId());
            let formData = {
                "jobId":            getJobId(),
                "scaleFactor":      $("input[name=scaleFactor]").val(),
                "modelThickness":   $("input[name=modelThickness]").val(),
                "travelSpeed":      $("input[name=travelSpeed]").val(),
                "gcodeDialect":     $("#gcodeDialect option:selected").val(),
            }

            // Send parameters to server
            $.ajax({
                url: "/generator/generate",
                type: "POST",
                data: formData,
                success: handleGcodeGeneration,
            });

            // Get percentage of completion from server
            function handleGcodeGeneration(response) {
                let iframe = "<iframe id='viewer' src='/viewer/gcode_viewer.html' width='500' height='400' ></iframe>";
                let percentage = 0;
                let loadingBarUpdater = setInterval(function () {
                    $.ajax({
                        url: "/generator/queue/" + getJobId(),
                        type: "GET",
                        success: function (newPercentage) {
                            let progressBar = $(".progress .progress-bar");
                            // Update loading bar percentage using percentage sent by server response
                            if (percentage !== newPercentage) {
                                percentage = newPercentage;
                                // Get percentage from server and update loading bar
                                progressBar.attr("data-transitiongoal", percentage);
                                progressBar.progressbar();
                                // If percentage is 100, wait a sec then slick to the preview slide
                                if (percentage === "100") {
                                    async function  toPreview() {
                                        clearInterval(loadingBarUpdater);
                                        // Create new iframe and load gcode in it for viewer
                                        if ($("#gcodeViewerContainer").has(document.getElementById("viewer")).length == 0) {
                                            $("#gcodeViewerContainer").append(iframe);
                                        }
                                        $("#viewer").on("load", function () {
                                            console.log("iframe loaded");
                                            document.getElementById("viewer").contentWindow.loadGcodeFromServer(getJobId());
                                        });
                                        await sleep(1000);
                                        $(".generatorForm").slick("slickGoTo", 5);
                                    }
                                    toPreview();
                                }
                            }
                        }
                    });
                }, 1500);
                // Handle download button
                $("#download").click(function () {
                    window.open('http://ggen.com:8080/generator/outputs/'+getJobId(), "_blank");
                });
            }
        });
        $('#restartForm').click(function () {
            let progressBar = $(".progress .progress-bar");
            // Resets progress bar to value 0
            resetProgressBar();
            $(".generatorForm").slick("slickGoTo", 1);
        });
        $('#makeAnotherModel').click(function () {
            removeImage();
            resetProgressBar();
            // Cancel all data
            $(".generatorForm").slick("slickGoTo", 0);
        });
        $('#backToImageUpload').click(function () {
            $(".generatorForm").slick("slickGoTo", 0);
        });
        $('#backToPrinterSettings').click(function () {
            $(".generatorForm").slick("slickGoTo", 3);
        });

        $('#removeImage').click(removeImage);

        // Sliders brightness/contrast
        $("#brightnessSlider").mbSlider({
            formatValue: function (val) {
                return Number(val).toFixed(2);
            },
            onSlide: function (o) {
                if (canvas != null) {
                    if (canvas.getObjects()[0] != null) {
                        let val = $(o).mbgetVal();
                        img = canvas.getObjects()[0];

                        if (img.filters[0] != null) {
                            img.filters[0]["brightness"] = parseFloat(val);
                        } else {
                            img.filters[0] = new fabric.Image.filters.Brightness({ brightness: parseFloat(val) });
                        }

                        img.applyFilters();
                        canvas.renderAll();
                    }
                }
            },
            onStop: function (o) {
                // If user didn't upload an image, reset slider value to 0
                if (canvas == null || canvas.getObjects()[0] == null) {
                    $("#brightnessSlider").mbsetVal(0);
                }
            }
        });
        $("#contrastSlider").mbSlider({
            formatValue: function (val) {
                return Number(val).toFixed(2);
            },
            onSlide: function (o) {
                if (canvas != null && canvas.getObjects()[0] != null) {
                    let val = $(o).mbgetVal();
                    let img = canvas.getObjects()[0];

                    if (img.filters[1] != null) {
                        img.filters[1]["contrast"] = parseFloat(val);
                    } else {
                        img.filters[1] = new fabric.Image.filters.Contrast({ contrast: parseFloat(val) });
                    }

                    img.applyFilters();
                    canvas.renderAll();
                }
            },
            onStop: function (o) {
                // If user didn't upload an image, reset slider value to 0
                if (canvas == null || canvas.getObjects()[0] == null) {
                    $("#contrastSlider").mbsetVal(0);
                }
            }

        });

    });

    Dropzone.options.imageUpload = {
        paramName: "image", // The name that will be used to transfer the file
        maxFilesize: 5, // MB
        previewsContainer: false,
        accept: function (file, done) {
            // Checks if file has an image extension. If not, decline upload
            let re = /(?:\.([^.]+))?$/;
            let ext = re.exec(file.name)[1];
            ext = ext.toUpperCase();
            if (ext == "JPEG" || ext == "PNG" || ext == "BMP" || ext == "JPG") {
                done();
            } else {
                alert("Accepted filetypes are JPEG, JPG, PNG, BMP.");
            }
        },
        // On image upload success
        success: function (file, response) {
            console.log("id returned: " + response);
            setJobId(response);
            createCanvasFromImage(response);
            Cookies.set("ImageName", response, { expires: 3 });
        }
    };

    function createCanvasFromImage(id) {
        if (id !== "") {
            $("#canvasContainer").show();
            let canvasContainer;

            // If canvas wasn't create before
            if (canvas == null) {
                // Create canvas element
                canvasContainer = document.createElement("canvas");
                // Append new canvas to the canvasContainer div
                $("#canvasContainer").append(canvasContainer);
                // Create new fabric.Canvas referring to the new canvas element
                canvas = new fabric.StaticCanvas(canvasContainer, {width: 0, height: 0});
                canvas.hoverCursor = "default";
            }
            // Add image to canvas
            fabric.Image.fromURL("../uploads/" + id + "?new=", function (oImg) {
                let scale = imageWidth / oImg.width;

                oImg.set({
                    scaleX: scale,
                    scaleY: scale,
                    lockMovementX: true,
                    lockMovementY: true,
                    selectable: false,
                    hasControls: false,
                    hasRotatingPoint: false,

                });

                canvas.setWidth(imageWidth);
                canvas.setHeight(oImg.height * scale);
                canvas.add(oImg);
            });
            $("#removeImage").prop("disabled", false);
            $('#forwardToGeneralSettings').prop("disabled", false);
            $("#imageUpload").hide();
        }
    }

    function removeImage() {
        $.ajax({
            url: '/generator/imageRemove/'+getJobId(),
            type: 'DELETE',
            success: function (result) {
                Cookies.remove("ImageName");
                $("#forwardToGeneralSettings").prop("disabled", true);
                $("#brightnessSlider").mbsetVal(0);
                $("#contrastSlider").mbsetVal(0);
                canvas.clear();
                $("#canvasContainer").hide();
                $("#imageUpload").show();
            }
        });
    }

    function resetProgressBar() {
        let progressBar = $(".progress .progress-bar");
        progressBar.attr("data-transitiongoal", 0);
        progressBar.progressbar();
    }

    function getJobId() {
        console.log("getJobId(): " + Cookies.get("JobId"));
        return Cookies.get("JobId");
    }

    function setJobId(jobId) {
        Cookies.set("JobId", jobId, { expires: 3 });
        console.log("setJobId(): " + getJobId());
    }

    function loadCookieValues() {
        // If current has not been assigned a session cookie yet, set default exp date of cookies 3 days from now
        if (Cookies.get("UserSession") === undefined) {
            let expiration = new Date();
            // Expiration date will be from 3 days from now for all cookies
            expiration.setHours(expiration.getHours()+24*3);
            Cookies.set({ expires: expiration });
        }
        // If cookie with imageName exists, create canvas with it
        let cookieImage = Cookies.get("ImageName");
        if (cookieImage !== undefined) {
            createCanvasFromImage(cookieImage);
        }
        let scaleFactor = Cookies.get("ScaleFactor");
        if (scaleFactor !== undefined) {
            $("scaleFactor").val(scaleFactor);
        } else {
            Cookies.set("ScaleFactor", 125, { expires: 3 });
        }
        let modelThickness = Cookies.get("ModelThickness");
        if (modelThickness!== undefined) {
            $("modelThickness").val(modelThickness);
        } else {
            Cookies.set("ModelThickness", 2, { expires: 3 });
        }
        let travelSpeed = Cookies.get("TravelSpeed");
        if (scaleFactor !== undefined) {
            $("travelSpeed").val(travelSpeed);
        } else {
            Cookies.set("TravelSpeed", 4, { expires: 3 });
        }
        // TODO: Gcode dialect select field
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

</script> {{end}} {{define "content"}}
<section class="generatorForm">
    <!-- Upload image slide -->
    <div>
        <fieldset class="slickContainer">
            <legend class="slideTitle">Upload image</legend>
            <div id="canvasContainer"></div>
            <!-- Drag & drop image -->
            <div id="imageUploadContainer">
                <form action="generator/imageUpload" id="imageUpload" class="dropzone" enctype="multipart/form-data" method="POST"> </form>
            </div>

            <table id="formTable" style="padding-top:20px;">
                <tr>
                    <td style="padding-bottom: 11px;padding-right: 10px;">
                        <label style="font-weight: bold;">Brightness</label>
                    </td>
                    <td>
                        <div id="brightnessSlider" class="mb_slider" data-property="{minVal:-1,rangeColor:'green', maxVal:1, startAt:0, grid:0.003921}"
                             style="display:block;"></div>
                    </td>
                </tr>
                <tr>
                    <td style="padding-bottom: 11px;padding-right: 10px;">
                        <label style="font-weight: bold;">Contrast</label>
                    </td>
                    <td>
                        <div id="contrastSlider" class="mb_slider" data-property="{minVal:-1,rangeColor:'green', maxVal:1, startAt:0, grid:0.003921}"
                             style="display:block;"></div>
                    </td>
                </tr>
            </table>

            <div class="slickControls">
                <button id="removeImage" type="button" disabled>Remove image</button>
                <button id="forwardToGeneralSettings" type="button" disabled>Next</button>
            </div>
        </fieldset>
    </div>
    <!-- Printer settings slide -->
    <div>
        <fieldset>
            <legend class="slideTitle">Printer settings</legend>
            <div class="slickControls">
                <table id="formTable">
                    <tr>
                        <td style="padding-right:10px;">
                            <label style="font-weight: bold;">Scale factor [mm]</label>
                        </td>
                        <td>
                            <input id="scaleFactor" name="scaleFactor" type="number" step="0.5" value="125">
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-right:10px;">
                            <label style="font-weight: bold;">Model thickness [mm]</label>
                        </td>
                        <td>
                            <input id="modelThickness" name="modelThickness" type="number" min="0" max="2000" step="1" value="2">
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-right:10px;">
                            <label style="font-weight: bold;">Travel speed [mm/s]</label>
                        </td>
                        <td>
                            <input id="travelSpeed" name="travelSpeed" type="number" min="0" max="2000" step="1" value="4">
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-right:10px;">
                            <label style="font-weight: bold;">GCode dialect</label>
                        </td>
                        <td>
                            <select id="gcodeDialect">
                                <option value="RepRap">RepRap</option>
                                <option value="Ultimaker">Ultimaker (UltiGCode)</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <div class="settingsContainer">
                    <button id="backToImageUpload" type="button">Back</button>
                    <button id="forwardToLoadingScreen" type="button">Generate!</button>
                </div>
            </div>
        </fieldset>
    </div>
    <!-- Loading slide -->
    <div>
        <div class="progress progress-striped">
            <div class="progress-bar" role="progressbar" data-transitiongoal="0"></div>
        </div>
    </div>
    <!-- Preview slide -->
    <div>
        <fieldset>
            <legend class="slideTitle">Preview</legend>
            <div id="gcodeViewerContainer">

            </div>
            <input type="button" id="download" value="Download GCode file" />
            <button id="restartForm" type="button">Remake it</button>
            <button id="makeAnotherModel" type="button">Another one</button>
        </fieldset>
    </div>
</section>
{{end}}